{
  "contract_name": "claimdrop-contract",
  "contract_version": "2.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "action": {
        "description": "Optinal action in case the contract is instantiated via the claimdrop factory",
        "anyOf": [
          {
            "$ref": "#/definitions/CampaignAction"
          },
          {
            "type": "null"
          }
        ]
      },
      "owner": {
        "description": "Owner of the contract. If not set, it is the sender of the Instantiate message.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "CampaignAction": {
        "description": "The campaign action that can be executed with the [ExecuteMsg::ManageCampaign] message.",
        "oneOf": [
          {
            "description": "Creates a new campaign",
            "type": "object",
            "required": [
              "create_campaign"
            ],
            "properties": {
              "create_campaign": {
                "type": "object",
                "required": [
                  "params"
                ],
                "properties": {
                  "params": {
                    "description": "The parameters to create a campaign with",
                    "allOf": [
                      {
                        "$ref": "#/definitions/CampaignParams"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Closes the campaign",
            "type": "object",
            "required": [
              "close_campaign"
            ],
            "properties": {
              "close_campaign": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CampaignParams": {
        "description": "Represents the parameters to create a campaign with.",
        "type": "object",
        "required": [
          "description",
          "distribution_type",
          "end_time",
          "name",
          "reward_denom",
          "start_time",
          "total_reward",
          "type"
        ],
        "properties": {
          "description": {
            "description": "The campaign description",
            "type": "string"
          },
          "distribution_type": {
            "description": "The ways the reward is distributed, which are defined by the [DistributionType]. The sum of the percentages must be 100.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/DistributionType"
            }
          },
          "end_time": {
            "description": "The campaign end timestamp (unix timestamp), in seconds",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "name": {
            "description": "The campaign name",
            "type": "string"
          },
          "reward_denom": {
            "description": "The denom to be distributed as reward by the campaign",
            "type": "string"
          },
          "start_time": {
            "description": "The campaign start time (unix timestamp), in seconds",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "total_reward": {
            "description": "The total amount of the reward asset that is intended to be allocated to the campaign",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "type": {
            "description": "Campaign type. Value used by front ends.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DistributionType": {
        "oneOf": [
          {
            "description": "The distribution is done in a linear vesting schedule",
            "type": "object",
            "required": [
              "linear_vesting"
            ],
            "properties": {
              "linear_vesting": {
                "type": "object",
                "required": [
                  "end_time",
                  "percentage",
                  "start_time"
                ],
                "properties": {
                  "cliff_duration": {
                    "description": "The duration of the cliff, in seconds",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "end_time": {
                    "description": "The unix timestamp when this distribution type ends, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "percentage": {
                    "description": "The percentage of the total reward to be distributed with a linear vesting schedule",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  },
                  "start_time": {
                    "description": "The unix timestamp when this distribution type starts, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The distribution is done in a single lump sum, i.e. no vesting period",
            "type": "object",
            "required": [
              "lump_sum"
            ],
            "properties": {
              "lump_sum": {
                "type": "object",
                "required": [
                  "percentage",
                  "start_time"
                ],
                "properties": {
                  "percentage": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "start_time": {
                    "description": "The unix timestamp when this distribution type starts, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Manages campaigns based on the action, defined by [CampaignAction].",
        "type": "object",
        "required": [
          "manage_campaign"
        ],
        "properties": {
          "manage_campaign": {
            "type": "object",
            "required": [
              "action"
            ],
            "properties": {
              "action": {
                "$ref": "#/definitions/CampaignAction"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claims rewards from a campaign",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "properties": {
              "amount": {
                "description": "The amount to claim. If not set, all available tokens will be claimed.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "receiver": {
                "description": "The receiver address of the claimed rewards. If not set, the sender of the message will be the receiver. This is useful for allowing a contract to do the claim operation on behalf of a user.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds a batch of addresses and their allocations. This can only be done before the campaign has started.",
        "type": "object",
        "required": [
          "add_allocations"
        ],
        "properties": {
          "add_allocations": {
            "type": "object",
            "required": [
              "allocations"
            ],
            "properties": {
              "allocations": {
                "description": "Vector of (address, amount) pairs",
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "$ref": "#/definitions/Uint128"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Replaces an address in the allocation list. This can only be done before the campaign has started.",
        "type": "object",
        "required": [
          "replace_address"
        ],
        "properties": {
          "replace_address": {
            "type": "object",
            "required": [
              "new_address",
              "old_address"
            ],
            "properties": {
              "new_address": {
                "description": "The new address to use",
                "type": "string"
              },
              "old_address": {
                "description": "The old address to replace",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Removes an address in the allocation list. This can only be done before the campaign has started.",
        "type": "object",
        "required": [
          "remove_address"
        ],
        "properties": {
          "remove_address": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address to remove",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Blacklists or unblacklists an address. This can be done at any time.",
        "type": "object",
        "required": [
          "blacklist_address"
        ],
        "properties": {
          "blacklist_address": {
            "type": "object",
            "required": [
              "address",
              "blacklist"
            ],
            "properties": {
              "address": {
                "description": "The address to blacklist/unblacklist",
                "type": "string"
              },
              "blacklist": {
                "description": "Whether to blacklist or unblacklist",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Manages authorized wallets that can perform admin actions. Only the owner can manage authorized wallets.",
        "type": "object",
        "required": [
          "manage_authorized_wallets"
        ],
        "properties": {
          "manage_authorized_wallets": {
            "type": "object",
            "required": [
              "addresses",
              "authorized"
            ],
            "properties": {
              "addresses": {
                "description": "Vector of addresses to authorize/unauthorize",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "authorized": {
                "description": "Whether to authorize or unauthorize the addresses",
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
        "type": "object",
        "required": [
          "update_ownership"
        ],
        "properties": {
          "update_ownership": {
            "$ref": "#/definitions/Action"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Action": {
        "description": "Actions that can be taken to alter the contract's ownership",
        "oneOf": [
          {
            "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
            "type": "object",
            "required": [
              "transfer_ownership"
            ],
            "properties": {
              "transfer_ownership": {
                "type": "object",
                "required": [
                  "new_owner"
                ],
                "properties": {
                  "expiry": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Expiration"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "new_owner": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
            "type": "string",
            "enum": [
              "accept_ownership"
            ]
          },
          {
            "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
            "type": "string",
            "enum": [
              "renounce_ownership"
            ]
          }
        ]
      },
      "CampaignAction": {
        "description": "The campaign action that can be executed with the [ExecuteMsg::ManageCampaign] message.",
        "oneOf": [
          {
            "description": "Creates a new campaign",
            "type": "object",
            "required": [
              "create_campaign"
            ],
            "properties": {
              "create_campaign": {
                "type": "object",
                "required": [
                  "params"
                ],
                "properties": {
                  "params": {
                    "description": "The parameters to create a campaign with",
                    "allOf": [
                      {
                        "$ref": "#/definitions/CampaignParams"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Closes the campaign",
            "type": "object",
            "required": [
              "close_campaign"
            ],
            "properties": {
              "close_campaign": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "CampaignParams": {
        "description": "Represents the parameters to create a campaign with.",
        "type": "object",
        "required": [
          "description",
          "distribution_type",
          "end_time",
          "name",
          "reward_denom",
          "start_time",
          "total_reward",
          "type"
        ],
        "properties": {
          "description": {
            "description": "The campaign description",
            "type": "string"
          },
          "distribution_type": {
            "description": "The ways the reward is distributed, which are defined by the [DistributionType]. The sum of the percentages must be 100.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/DistributionType"
            }
          },
          "end_time": {
            "description": "The campaign end timestamp (unix timestamp), in seconds",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "name": {
            "description": "The campaign name",
            "type": "string"
          },
          "reward_denom": {
            "description": "The denom to be distributed as reward by the campaign",
            "type": "string"
          },
          "start_time": {
            "description": "The campaign start time (unix timestamp), in seconds",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "total_reward": {
            "description": "The total amount of the reward asset that is intended to be allocated to the campaign",
            "allOf": [
              {
                "$ref": "#/definitions/Coin"
              }
            ]
          },
          "type": {
            "description": "Campaign type. Value used by front ends.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DistributionType": {
        "oneOf": [
          {
            "description": "The distribution is done in a linear vesting schedule",
            "type": "object",
            "required": [
              "linear_vesting"
            ],
            "properties": {
              "linear_vesting": {
                "type": "object",
                "required": [
                  "end_time",
                  "percentage",
                  "start_time"
                ],
                "properties": {
                  "cliff_duration": {
                    "description": "The duration of the cliff, in seconds",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "end_time": {
                    "description": "The unix timestamp when this distribution type ends, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "percentage": {
                    "description": "The percentage of the total reward to be distributed with a linear vesting schedule",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Decimal"
                      }
                    ]
                  },
                  "start_time": {
                    "description": "The unix timestamp when this distribution type starts, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "The distribution is done in a single lump sum, i.e. no vesting period",
            "type": "object",
            "required": [
              "lump_sum"
            ],
            "properties": {
              "lump_sum": {
                "type": "object",
                "required": [
                  "percentage",
                  "start_time"
                ],
                "properties": {
                  "percentage": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "start_time": {
                    "description": "The unix timestamp when this distribution type starts, in seconds",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Get the airdrop campaign",
        "type": "object",
        "required": [
          "campaign"
        ],
        "properties": {
          "campaign": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the rewards for a specific campaign and receiver address.",
        "type": "object",
        "required": [
          "rewards"
        ],
        "properties": {
          "rewards": {
            "type": "object",
            "required": [
              "receiver"
            ],
            "properties": {
              "receiver": {
                "description": "The address to get the rewards for.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the total amount of tokens claimed on the campaign.",
        "type": "object",
        "required": [
          "claimed"
        ],
        "properties": {
          "claimed": {
            "type": "object",
            "properties": {
              "address": {
                "description": "If provided, it will return the tokens claimed by the specified address.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "description": "The maximum number of items to return. If not set, the default value is used. Used for paginating results.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_from": {
                "description": "The address to start querying from. Used for paginating results.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the allocation for an address",
        "type": "object",
        "required": [
          "allocations"
        ],
        "properties": {
          "allocations": {
            "type": "object",
            "properties": {
              "address": {
                "description": "The address to get the allocation for, if provided",
                "type": [
                  "string",
                  "null"
                ]
              },
              "limit": {
                "description": "The maximum number of items to return. If not set, the default value is used. Used for paginating results.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint16",
                "minimum": 0.0
              },
              "start_after": {
                "description": "The address to start querying from. Used for paginating results.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Check if an address is blacklisted",
        "type": "object",
        "required": [
          "is_blacklisted"
        ],
        "properties": {
          "is_blacklisted": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address to check",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Check if an address is authorized (owner or authorized wallet)",
        "type": "object",
        "required": [
          "is_authorized"
        ],
        "properties": {
          "is_authorized": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "description": "The address to check",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get authorized wallets with pagination",
        "type": "object",
        "required": [
          "authorized_wallets"
        ],
        "properties": {
          "authorized_wallets": {
            "type": "object",
            "properties": {
              "limit": {
                "description": "The maximum number of items to return. Used for paginating results.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "description": "The address to start querying from. Used for paginating results.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Query the contract's ownership information",
        "type": "object",
        "required": [
          "ownership"
        ],
        "properties": {
          "ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "allocations": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllocationsResponse",
      "description": "Response to the Allocation query.",
      "type": "object",
      "required": [
        "allocations"
      ],
      "properties": {
        "allocations": {
          "description": "A vector with a tuple with (address, coin) that have been allocated.",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Coin"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "authorized_wallets": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuthorizedWalletsResponse",
      "description": "Response to the AuthorizedWallets query.",
      "type": "object",
      "required": [
        "wallets"
      ],
      "properties": {
        "wallets": {
          "description": "List of authorized wallet addresses",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "campaign": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Campaign",
      "description": "Represents a campaign.",
      "type": "object",
      "required": [
        "claimed",
        "description",
        "distribution_type",
        "end_time",
        "name",
        "reward_denom",
        "start_time",
        "total_reward",
        "type"
      ],
      "properties": {
        "claimed": {
          "description": "The amount of the reward asset that has been claimed",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "closed": {
          "description": "The timestamp at which the campaign was closed, in seconds",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "description": {
          "description": "The campaign description",
          "type": "string"
        },
        "distribution_type": {
          "description": "The ways the reward is distributed, which are defined by the [DistributionType]. The sum of the percentages must be 100.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionType"
          }
        },
        "end_time": {
          "description": "The campaign end time (unix timestamp), in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "name": {
          "description": "The campaign name",
          "type": "string"
        },
        "reward_denom": {
          "description": "The denom to be distributed as reward by the campaign",
          "type": "string"
        },
        "start_time": {
          "description": "The campaign start time (unix timestamp), in seconds",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "total_reward": {
          "description": "The total amount of the reward asset that is intended to be allocated to the campaign",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "type": {
          "description": "Campaign type. Value used by front ends.",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "DistributionType": {
          "oneOf": [
            {
              "description": "The distribution is done in a linear vesting schedule",
              "type": "object",
              "required": [
                "linear_vesting"
              ],
              "properties": {
                "linear_vesting": {
                  "type": "object",
                  "required": [
                    "end_time",
                    "percentage",
                    "start_time"
                  ],
                  "properties": {
                    "cliff_duration": {
                      "description": "The duration of the cliff, in seconds",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "end_time": {
                      "description": "The unix timestamp when this distribution type ends, in seconds",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "percentage": {
                      "description": "The percentage of the total reward to be distributed with a linear vesting schedule",
                      "allOf": [
                        {
                          "$ref": "#/definitions/Decimal"
                        }
                      ]
                    },
                    "start_time": {
                      "description": "The unix timestamp when this distribution type starts, in seconds",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "The distribution is done in a single lump sum, i.e. no vesting period",
              "type": "object",
              "required": [
                "lump_sum"
              ],
              "properties": {
                "lump_sum": {
                  "type": "object",
                  "required": [
                    "percentage",
                    "start_time"
                  ],
                  "properties": {
                    "percentage": {
                      "$ref": "#/definitions/Decimal"
                    },
                    "start_time": {
                      "description": "The unix timestamp when this distribution type starts, in seconds",
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClaimedResponse",
      "description": "Response to the Claimed query.",
      "type": "object",
      "required": [
        "claimed"
      ],
      "properties": {
        "claimed": {
          "description": "Contains a vector with a tuple with (address, coin) that have been claimed",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/Coin"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "is_authorized": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AuthorizedResponse",
      "description": "Response to the IsAuthorized query.",
      "type": "object",
      "required": [
        "is_authorized"
      ],
      "properties": {
        "is_authorized": {
          "description": "Whether the address is authorized (owner or authorized wallet)",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "is_blacklisted": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlacklistResponse",
      "description": "Response to the Blacklist query.",
      "type": "object",
      "required": [
        "is_blacklisted"
      ],
      "properties": {
        "is_blacklisted": {
          "description": "Whether the address is blacklisted",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "ownership": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ownership_for_String",
      "description": "The contract's ownership info",
      "type": "object",
      "properties": {
        "owner": {
          "description": "The contract's current owner. `None` if the ownership has been renounced.",
          "type": [
            "string",
            "null"
          ]
        },
        "pending_expiry": {
          "description": "The deadline for the pending owner to accept the ownership. `None` if there isn't a pending ownership transfer, or if a transfer exists and it doesn't have a deadline.",
          "anyOf": [
            {
              "$ref": "#/definitions/Expiration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pending_owner": {
          "description": "The account who has been proposed to take over the ownership. `None` if there isn't a pending ownership transfer.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "rewards": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RewardsResponse",
      "description": "Response to the Rewards query.",
      "type": "object",
      "required": [
        "available_to_claim",
        "claimed",
        "pending"
      ],
      "properties": {
        "available_to_claim": {
          "description": "The tokens that are available to be claimed by the address.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "claimed": {
          "description": "The tokens that have been claimed by the address.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "pending": {
          "description": "The total amount of tokens that is pending to be claimed by the address.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
