{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AllocationsResponse",
  "description": "Response to the Allocation query.",
  "type": "object",
  "required": [
    "allocations"
  ],
  "properties": {
    "allocations": {
      "description": "A vector with a tuple with (address, coin) that have been allocated.",
      "type": "array",
      "items": {
        "type": "array",
        "items": [
          {
            "type": "string"
          },
          {
            "$ref": "#/definitions/Coin"
          }
        ],
        "maxItems": 2,
        "minItems": 2
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
